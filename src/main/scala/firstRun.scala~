package temp
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf

object firstRun {
  def main(args:Array[String]){
    
    val conf = new SparkConf().setAppName("Simple Project")
    val sc = new SparkContext(conf)
    val sqlContext = new org.apache.spark.sql.SQLContext(sc)
    
    // createSchemaRDD is used to implicitly convert an RDD to a SchemaRDD.
    import sqlContext._
    case class Person(sub: String, pred: String, obj: String)
// Create an RDD of Person objects and register it as a table.
    //case class Person(sub: String, pred: String, obj: String)
    
    // Create an RDD of Person objects and register it as a table.
    val people = sc.textFile("/user/skilevic/miniData.n3").map(_.split("")).map(p => Person(p(0), p(1), p(2)))
    people.registerTempTable("mini")
    
    // SQL statements can be run by using the sql methods provided by sqlContext.
    val teenagers = sqlContext.sql("SELECT m1.sub as sub1, m1.pred as pred1, m1.obj as obj1, m2.pred as pred2, m2.obj as obj2  FROM mini m1 join mini m2 on (m1.obj=m2.sub)")
    
    // The results of SQL queries are SchemaRDDs and support all the normal RDD operations.
    // The columns of a row in the result can be accessed by ordinal.
    teenagers.map(t => t(0)).collect().foreach(println)
  }
}
